import net.neoforged.gradle.common.tasks.JarJar

plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.108'
    id 'io.github.0ffz.github-packages' version '[1,2)'
    id 'com.matthewprenger.cursegradle' version '[1.4,1.5)'
    id 'com.modrinth.minotaur' version '[2,3)'
}

version = "${mc_version}-${mod_version}-neoforge"
group = 'com.aetherteam.genesis'

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        workingDirectory project.file('run')
        systemProperty "${mod_id}.iside", 'true'
        systemProperty  'forge.logging.console.level', 'info'

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', mod_id
    }

    data {
        programArguments.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath(), '--existing', file('src/generated/resources/').getAbsolutePath(), '--existing-mod', 'aether', '--existing-mod', 'nitrogen_internals', '--existing-mod', 'cumulus_menus'
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    implementation "net.neoforged:neoforge:${project.neoforge_version}"

//    implementation "com.aetherteam.aether:aether:${project.aether_version}"
    implementation "local:aether:${project.aether_version}"

    implementation "com.aetherteam.nitrogen:nitrogen_internals:${project.nitrogen_version}"
    implementation "com.aetherteam.cumulus:cumulus_menus:${project.cumulus_version}"
    implementation "top.theillusivec4.curios:curios-neoforge:${project.curios_version}+${project.mc_version}"

    implementation "curse.maven:aeroblender-879879:${project.aeroblender_version}"
    implementation "com.github.glitchfiend:TerraBlender-neoforge:${project.terrablender_version}"

    jarJar("curse.maven:aeroblender-879879:${project.aeroblender_version}") {
        jarJar.ranged(it, "[${project.aeroblender_version},)")
        jarJar.pin(it, "${project.aeroblender_version}")
    }

    jarJar("com.github.glitchfiend:TerraBlender-neoforge:${project.terrablender_version}") {
        jarJar.ranged(it, "[${project.terrablender_version_minimum},${project.terrablender_version_maximum})")
        jarJar.pin(it, "${project.terrablender_version}")
    }

    compileOnly "curse.maven:jade-324717:${project.jade_version}"


    //runtimeOnly fg.deobf("io.github.flemmli97:debugutils:${project.mc_version}-${project.debugutils_version}-forge")
}

repositories {
    maven { url = "https://jitpack.io" }
    maven { url = "https://maven.blamejared.com" }
    maven { url = "https://maven.theillusivec4.top/" }
    maven { url = "https://www.cursemaven.com" }
    maven { url = "https://gitlab.com/api/v4/projects/21830712/packages/maven" }
    maven { url = 'https://maven.minecraftforge.net/' }
    maven githubPackage.invoke("The-Aether-Team/The-Aether")
    maven githubPackage.invoke("The-Aether-Team/Nitrogen")
    maven githubPackage.invoke("The-Aether-Team/Cumulus")
    flatDir {
        dir 'libs'
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : project.mod_name,
                "Specification-Vendor"    : "The Aether Team",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.mod_name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "The Aether Team",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    archiveClassifier = 'no-embeds'
}

tasks.named('jarJar', JarJar).configure {
    archiveClassifier = ''
}

compileJava {
    options.incremental = false
}

tasks.register('sourceJar', Jar) {
    dependsOn 'classes'
    from sourceSets.main.allSource
    archiveClassifier = 'sources'
}

//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            artifactId project.archivesBaseName
//            artifact jar
//            artifact sourceJar
//        }
//    }
//    repositories {
//        maven {
//            name = "GitHubPackages"
//            url = "https://maven.pkg.github.com/The-Aether-Team/Example-Mod"
//            credentials {
//                username = System.getenv("GITHUB_ACTOR")
//                password = System.getenv("GITHUB_TOKEN")
//            }
//        }
//    }
//}
//
//curseforge {
//    project {
//        apiKey = System.getenv("CURSEFORGE_TOKEN")
//        id = "${project.curseforge_id}"
//        releaseType = "${project.version_type}"
//        changelog = file("$rootDir/docs/CHANGELOG.md")
//        changelogType = "markdown"
//        addGameVersion("${project.mc_version}")
//        mainArtifact(tasks.jar) {
//            displayName = "${project.mod_name} - ${version}"
//        }
//    }
//}
//
//modrinth {
//    token = System.getenv("MODRINTH_TOKEN")
//    projectId = "${project.modrinth_id}"
//    versionNumber = "${version}"
//    versionType = "${project.version_type}"
//    versionName = "${project.mod_name} - ${version}"
//    changelog = new File("$rootDir/docs/CHANGELOG.md").text
//    uploadFile = tasks.jar
//    gameVersions = ["${project.mc_version}"]
//    loaders = ["forge"]
//}

build {
    dependsOn 'jarJar'
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}